from flask import request, jsonify
from flask_restx import Namespace, Resource, fields
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
import asyncio

auth_ns = Namespace('auth', description='Autenticação com Telegram')

# Hardcoded configs
api_id = 123456
api_hash = "abc123"
session_name = "telegram_extractor_session"

# Models
login_model = auth_ns.model('Login', {
    'phone': fields.String(required=True, description='Número com +55...')
})

verify_model = auth_ns.model('Verify', {
    'phone': fields.String(required=True),
    'code': fields.String(required=True)
})


@auth_ns.route('/request_code')
class AuthRequestCode(Resource):
    @auth_ns.expect(login_model)
    def post(self):
        data = request.get_json()
        phone = data['phone']

        async def send_code():
            client = TelegramClient(session_name, api_id, api_hash)
            await client.connect()
            await client.send_code_request(phone)
            await client.disconnect()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send_code())
            return jsonify({'status': 'code_sent'})
        except Exception as e:
            return jsonify({'error': str(e)}), 400


@auth_ns.route('/verify_code')
class AuthVerifyCode(Resource):
    @auth_ns.expect(verify_model)
    def post(self):
        data = request.get_json()
        phone = data['phone']
        code = data['code']

        async def verify():
            client = TelegramClient(session_name, api_id, api_hash)
            await client.connect()
            try:
                await client.sign_in(phone=phone, code=code)
            except SessionPasswordNeededError:
                return {'error': '2FA habilitado. Não suportado aqui.'}
            await client.disconnect()
            return {'status': 'authenticated'}

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(verify())
            return jsonify(result)
        except Exception as e:
            return jsonify({'error': str(e)}), 400