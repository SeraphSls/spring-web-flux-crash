from flask import request, jsonify from flask_restx import Namespace, Resource, fields from telethon import TelegramClient from telethon.errors import SessionPasswordNeededError import asyncio

Namespace para rotas de autenticação

auth_ns = Namespace('auth', description='Autenticação via Telegram')

Configurações fixas

api_id = 123456  # substitua pelo seu api_hash = "abc123"  # substitua pelo seu session_name = "telegram_extractor_session"

Models

request_model = auth_ns.model('RequestCode', { 'phone': fields.String(required=True, description='Telefone com +55') })

verify_model = auth_ns.model('VerifyCode', { 'phone': fields.String(required=True), 'code': fields.String(required=True) })

Endpoint para solicitar o código

@auth_ns.route('/request_code') class RequestCode(Resource): @auth_ns.expect(request_model) def post(self): data = request.get_json() phone = data['phone']

async def send_code():
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        await client.send_code_request(phone)
        await client.disconnect()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(send_code())
        return jsonify({'status': 'code_sent'})
    except Exception as e:
        return jsonify({'error': str(e)}), 400

Endpoint para verificar o código e autenticar

@auth_ns.route('/verify_code') class VerifyCode(Resource): @auth_ns.expect(verify_model) def post(self): data = request.get_json() phone = data['phone'] code = data['code']

async def verify():
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        try:
            await client.sign_in(phone=phone, code=code)
            await client.disconnect()
            return {'status': 'authenticated'}
        except SessionPasswordNeededError:
            await client.disconnect()
            return {'error': '2FA habilitado. Não suportado.'}
        except Exception as e:
            await client.disconnect()
            return {'error': str(e)}

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    result = loop.run_until_complete(verify())
    return jsonify(result)

Endpoint para verificar se o client está autenticado

@auth_ns.route('/status') class AuthStatus(Resource): def get(self): async def check(): client = TelegramClient(session_name, api_id, api_hash) await client.connect() is_auth = await client.is_user_authorized() await client.disconnect() return {'authorized': is_auth}

loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    result = loop.run_until_complete(check())
    return jsonify(result)

