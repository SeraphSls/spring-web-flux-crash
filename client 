"""Flask app creation with Telethon integration."""

from flask import Flask
from app.ping import ping
from app.routes.message_routes import message_routes
from opentelemetry.instrumentation.flask import FlaskInstrumentor
from telethon import TelegramClient
import os
import asyncio
import threading

# Telethon configs
API_ID = os.getenv("TG_API_ID")
API_HASH = os.getenv("TG_API_HASH")
SESSION_NAME = "session_name"

# Global loop e client
loop = asyncio.new_event_loop()
client = TelegramClient(SESSION_NAME, API_ID, API_HASH, loop=loop)


def start_telethon():
    asyncio.set_event_loop(loop)
    loop.run_until_complete(client.start())
    loop.run_forever()

threading.Thread(target=start_telethon, daemon=True).start()


ACTIVE_ENDPOINTS = [("/", ping), ("/message_routes", message_routes)]

def instrument_app(app):
    enabled = os.getenv("OTEL_AGENT_ENABLED", "false")
    if enabled == "true":
        FlaskInstrumentor().instrument_app(app)

def create_app():
    """Create Flask app."""
    app = Flask(__name__)
    app.url_map.strict_slashes = False

    for url, blueprint in ACTIVE_ENDPOINTS:
        app.register_blueprint(blueprint, url_prefix=url)

    instrument_app(app)
    return app


__all__ = ["client", "loop"]





-----------------------------


from flask import Blueprint, request, jsonify
from app import client, loop
import asyncio

bp = Blueprint("message_routes", __name__)

@bp.route("/get_user", methods=["GET"])
def get_user():
    username = request.args.get("username")
    future = asyncio.run_coroutine_threadsafe(client.get_entity(username), loop)

    try:
        user = future.result(timeout=10)
        return jsonify({
            "id": user.id,
            "first_name": user.first_name,
            "username": user.username
        })
    except Exception as e:
        return jsonify({"error": str(e)}) 